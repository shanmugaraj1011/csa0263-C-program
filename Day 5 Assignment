1.	Write a program that reads a file named "input.txt" and writes all lines containing the word "error" to a file named "error_log.txt". Then, read the "error_log.txt" file and print the contents to the console

#include <stdio.h>

#include <string.h>

int main() {

    

FILE *input_file = fopen("input.txt", "r");

if (input_file == NULL) {

printf("Error: Could not open input.txt\n");

return 1;

}

FILE *error_file = fopen("error_log.txt", "w");

if (error_file == NULL) {

printf("Error: Could not open error_log.txt\n");

return 1;

}

char line[100];

while (fgets(line, 100, input_file)) {

if (strstr(line, "error") != NULL) {

fputs(line, error_file);

}

}

fclose(input_file);

fclose(error_file);

error_file = fopen("error_log.txt", "r");

if (error_file == NULL) {

printf("Error: Could not open error_log.txt\n");

return 1;

}

printf("Contents of error_log.txt:\n");

while (fgets(line, 100, error_file)) {

printf("%s", line);

}

fclose(error_file);

return 0;

}

2.	Create a program that reads data from a binary file named "data.bin" and prints it to the console in a human-readable format.

#include <stdio.h>

int main() {

    

FILE *binary_file = fopen("data.bin", "rb");

if (binary_file == NULL) {

printf("Error: Could not open data.bin\n");

return 1;

}

fseek(binary_file, 0, SEEK_END);

long file_size = ftell(binary_file);

fseek(binary_file, 0, SEEK_SET);

char *data = malloc(file_size);

if (data == NULL) {

printf("Error: Out of memory\n");

return 1;

}

fread(data, 1, file_size, binary_file);

fclose(binary_file);

for (int i = 0; i < file_size; i++) {

printf("%c", data[i]);

}

free(data);

return 0;

}

3.	Write a program that reads a text file named "input.txt" and replaces all occurrences of the word "red" with the word "blue". Then, write the modified text to a new file named "output.txt".

#include <stdio.h>

#include <string.h>

#define 

int main() {

FILE *input_file = fopen("input.txt", "r");

if (input_file == NULL) {

printf("Error: Could not open input.txt\n");

return 1;

}

FILE *output_file = fopen("output.txt", "w");

if (output_file == NULL) {

printf("Error: Could not create output.txt\n");

fclose(input_file);

return 1;

}

char line[MAX_LINE_LENGTH];

while (fgets(line, MAX_LINE_LENGTH, input_file) != NULL) {

char *token;

char *rest = line;

while ((token = strtok_r(rest, " ", &rest))) {

if (strcmp(token, "red\n") == 0 || strcmp(token, "red") == 0) {

fputs("blue ", output_file);

} else {

fputs(token, output_file);

fputs(" ", output_file);

}

}

}

fclose(input_file);

fclose(output_file);

return 0;

}

4.	Create a program that prompts the user to enter the name of a file and a search string. The program should read the file and print all lines that contain the search string to the console.

#include <stdio.h>

#include <string.h>

#define 

int main() {

 char file_name[MAX_LINE_LENGTH];

char search_string[MAX_LINE_LENGTH];

printf("Enter the name of the file to search: ");

fgets(file_name, MAX_LINE_LENGTH, stdin);

printf("Enter the search string: ");

fgets(search_string, MAX_LINE_LENGTH, stdin);

file_name[strcspn(file_name, "\n")] = '\0';

search_string[strcspn(search_string, "\n")] = '\0';

FILE *input_file = fopen(file_name, "r");

if (input_file == NULL) {

printf("Error: Could not open file %s\n", file_name);

return 1;

}

char line[MAX_LINE_LENGTH];

while (fgets(line, MAX_LINE_LENGTH, input_file) != NULL) {

if (strstr(line, search_string) != NULL) {

printf("%s", line);

}

}

fclose(input_file);

return 0;

}

5.	Write a program that reads a file named "data.txt" and creates a new file named "statistics.txt". The program should write the number of occurrences of each letter of the alphabet in the file to the "statistics.txt" file.

#include <stdio.h>

#include <ctype.h>

#define 

int main() {

   

FILE *input_file = fopen("data.txt", "r");

if (input_file == NULL) {

printf("Error: Could not open input file\n");

return 1;

}

int counts[ALPHABET_SIZE] = {0};

int c;

while ((c = fgetc(input_file)) != EOF) {

if (isalpha(c)) {

c = tolower(c);

counts[c - 'a']++;

}

}

fclose(input_file);

FILE *output_file = fopen("statistics.txt", "w");

if (output_file == NULL) {

printf("Error: Could not open output file\n");

return 1;

}

for (int i = 0; i < ALPHABET_SIZE; i++) {

fprintf(output_file, "%c: %d\n", 'a' + i, counts[i]);

}

fclose(output_file);

return 0;

}
